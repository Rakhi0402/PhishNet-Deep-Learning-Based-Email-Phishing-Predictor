# -*- coding: utf-8 -*-
"""Phishing_model_DistilBERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D1a1JM1BixSXVUz6CheciYysBtWWiYaD
"""

!pip install transformers datasets

import pandas as pd
from datasets import Dataset
from transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification, TrainingArguments, Trainer
from sklearn.model_selection import train_test_split
import torch
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Load Dataset
df = pd.read_csv("/content/drive/MyDrive/phishing_email.csv")
print(f"Dataset shape: {df.shape}")
print("\nFirst 5 rows:")
print(df.head())

df = df[['text_combined', 'label']].dropna()
df['label'] = df['label'].astype(int)

train_texts, remaining_texts, train_labels, remaining_labels = train_test_split(
    df['text_combined'], df['label'], test_size=0.2, stratify=df['label'], random_state=42)
val_texts, test_texts, val_labels, test_labels = train_test_split(
    remaining_texts, remaining_labels, test_size=0.5, stratify=remaining_labels, random_state=42)

# Tokenization
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

def tokenize(batch):
    tokens = tokenizer(batch['text_combined'], padding='max_length', truncation=True, max_length=512)
    return {'input_ids': tokens['input_ids'], 'attention_mask': tokens['attention_mask']}

train_ds = Dataset.from_dict({'text_combined': train_texts.tolist(), 'label': train_labels.tolist()})
val_ds = Dataset.from_dict({'text_combined': val_texts.tolist(), 'label': val_labels.tolist()})
test_ds = Dataset.from_dict({'text_combined': test_texts.tolist(), 'label': test_labels.tolist()})

train_ds = train_ds.map(tokenize, batched=True).remove_columns(['text_combined'])
val_ds = val_ds.map(tokenize, batched=True).remove_columns(['text_combined'])
test_ds = test_ds.map(tokenize, batched=True).remove_columns(['text_combined'])

# Load Model
model = DistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased", num_labels=2)

print(model.config)
# Training Configuration
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    eval_strategy="epoch",
    save_strategy="epoch",
    logging_dir='./logs',
    logging_steps=100,
    load_best_model_at_end=True,
    metric_for_best_model="eval_loss",
    save_total_limit=1,
    report_to="none"
)

import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')
    acc = accuracy_score(labels, preds)
    return {"accuracy": acc, "f1": f1, "precision": precision, "recall": recall}

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=val_ds,
    compute_metrics=compute_metrics
)

trainer.train()
trainer.evaluate()

history = trainer.state.log_history

trainer.save_model("./Phishing_model_DistilBERT")
tokenizer.save_pretrained("./Phishing_model_DistilBERT")
!cp -r ./Phishing_model_DistilBERT /content/drive/MyDrive/

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, precision_recall_fscore_support


def compute_metrics(pred):
       global train_accuracy
       labels = pred.label_ids
       preds = np.argmax(pred.predictions, axis=1)
       precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')
       acc = accuracy_score(labels, preds)
       train_accuracy.append(acc)
       return {"accuracy": acc, "f1": f1, "precision": precision, "recall": recall}

results = trainer.evaluate(eval_dataset=test_ds)
print("Test Results:", results)

preds = trainer.predict(test_ds)
predicted_labels = preds.predictions.argmax(-1)
target_names = ['Legitimate', 'Phishing']

report = classification_report(preds.label_ids, predicted_labels, target_names=target_names, digits=4)
print(report)

cm = confusion_matrix(preds.label_ids, predicted_labels)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
disp.plot()
plt.title("Confusion Matrix")
plt.show()

from transformers import DistilBertForSequenceClassification, DistilBertTokenizer, pipeline
import pandas as pd

model_path = "/content/drive/MyDrive/Phishing_model_DistilBERT"

model = DistilBertForSequenceClassification.from_pretrained(model_path)
tokenizer = DistilBertTokenizer.from_pretrained(model_path)

classifier = pipeline("text-classification", model=model, tokenizer=tokenizer)

new_emails = pd.read_csv("/content/Book1.csv")

predictions = []
for email in new_emails['text_combined']:
    prediction = classifier(email, truncation=True, max_length=512)
    predictions.append(prediction[0]['label'])

new_emails["prediction"] = predictions

print(new_emails)

new_emails.to_csv("/content/drive/MyDrive/predicted_emails.csv", index=False)